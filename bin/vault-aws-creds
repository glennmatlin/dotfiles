#!/usr/bin/env bash

####################################################################################################
# USAGE: vault-aws-creds <aws-profile> <vault-key>
#        This will read AWS credentials from vault using <vault-key> and update `~/.aws/credentials`
#        file with the new credentials.
#
#        To avoid calling vault on every run, the script will cache vault responses
#        in `~/.aws/vault_<aws-profile>.json` and only call vault once credentials expire.
#
#        VAULT COMMANDS:
#        There are 2 supported vault commands depending on the <vault-key> provided:
#        1. Keys that end with `-og`: vault write -f -format=json <vault-key>
#        2. All other keys          : vault read -format=json <vault-key>
#
#        To use <aws-profile> when running AWS CLI commands use `--profile <aws-profile>`
####################################################################################################

set -o errexit
set -o pipefail
set -o nounset

PROFILE=$1
VAULT_KEY=$2
CACHE_PATH="$HOME/.aws/vault_$PROFILE.json"

if [[ ! -s $CACHE_PATH || $(jq -r '(.Expiration | fromdateiso8601) < now' $CACHE_PATH) == "true" ]]
then
  if [[ $VAULT_KEY =~ .*-og$ ]]; then
  	VAULT_CMD="write -f"
  else 
  	VAULT_CMD="read"
  fi

  umask 177
  vault $VAULT_CMD -format=json $VAULT_KEY | jq -r '. | {"Version": 1, AccessKeyId: .data.access_key, SecretAccessKey: .data.secret_key, SessionToken: (if (.data.security_token == null) then "" else .data.security_token end), Expiration: (now+.lease_duration|todate)}' > $CACHE_PATH
fi

acc=$(jq -r .AccessKeyId $CACHE_PATH)
sec=$(jq -r .SecretAccessKey $CACHE_PATH)
tok=$(jq -r .SessionToken $CACHE_PATH)
aws configure set aws_access_key_id $acc --profile $PROFILE
aws configure set aws_secret_access_key $sec --profile $PROFILE
aws configure set aws_session_token "$tok" --profile $PROFILE

cat $CACHE_PATH

